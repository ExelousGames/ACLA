import { Prop, Schema, SchemaFactory } from "@nestjs/mongoose";
import { Types } from "mongoose";

//Each schema maps to a MongoDB collection and defines the shape of the documents within that collection
//The @Schema() decorator marks a class as a schema definition. It maps our Cat class to a MongoDB collection of the same name, but with an additional “s” at the end - so the final mongo collection name will be cats
@Schema()
export class UserInfo {

    @Prop()
    id: string;

    @Prop({ required: true, unique: true })
    email: string;

    @Prop({ required: true })
    password: string;

    //We are referencing Role schema here. each user can have multiple roles
    //use Objectid because we are storing references to Role documents
    //MongoDB's ObjectId is a 12-byte unique identifier automatically generated by MongoDB drivers and assigned to the _id field of each document by default. 
    @Prop({ type: [{ type: Types.ObjectId, ref: 'Role' }] })
    roles: Types.ObjectId[];

    //We are referencing Permission schema here. each user can have multiple permissions
    @Prop({ type: [{ type: Types.ObjectId, ref: 'Permission' }] })
    permissions: Types.ObjectId[];

    @Prop({ default: true })
    isActive: boolean;

    @Prop({ default: Date.now })
    createdAt: Date;

    @Prop({ default: Date.now })
    lastLogin: Date;
}

export const UserInfoSchema = SchemaFactory.createForClass(UserInfo);
